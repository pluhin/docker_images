name: Build and Publish Docker Images

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-folders: ${{ steps.get-changes.outputs.changed-folders }}
      has-changes: ${{ steps.get-changes.outputs.has-changes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Changed Folders
        id: get-changes
        run: |
          # Get all changed top-level folders
          CHANGED_FOLDERS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | awk -F'/' '{print $1}' | sort -u | uniq)
          
          # Filter folders containing Dockerfile
          DOCKER_FOLDERS=""
          for folder in $CHANGED_FOLDERS; do
            if [ -f "$folder/Dockerfile" ]; then
              DOCKER_FOLDERS="$DOCKER_FOLDERS,\"$folder\""
            fi
          done

          # Remove leading comma and set as output
          if [ -n "$DOCKER_FOLDERS" ]; then
            DOCKER_FOLDERS="[${DOCKER_FOLDERS:1}]"
            echo "changed-folders=$DOCKER_FOLDERS" >> $GITHUB_ENV
            echo "has-changes=true" >> $GITHUB_ENV
          else
            echo "changed-folders=[]" >> $GITHUB_ENV
            echo "has-changes=false" >> $GITHUB_ENV
          fi

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changes.outputs.changed-folders) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and Push Image
        env:
          IMAGE_NAME: ${{ github.actor }}/${{ matrix.folder }}
          TAG: ${{ github.sha }}
        run: |
          docker build -t $IMAGE_NAME:$TAG ./${{ matrix.folder }}
          docker push $IMAGE_NAME:$TAG

      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸŽ‰ *Docker image built and pushed!*
            - Image: `${ github.actor }}/${{ matrix.folder }}`
            - Tag: `${{ github.sha }}`